median(curve[1,11])
median(curve[1,1])
5858.106/3983.202
View(curve)
5234.448/3983.202
median(curve[1,])
curve.prop<-apply(curve,1,function(x) {x/median(x)})
View(curve.prop)
?mad
curve.prop<-apply(curve,1,function(x) {mad(x)})
?curve.prop
?sweep
curve.prop<-sweep(curve,1,median,"/")
curve.prop<-sweep(curve,1,curve/median,"/")
curve.prop<-sweep(curve,1,apply(curve,1,median),"/")
View(curve.prop)
median(curve[1,])
curve[1,1]/median(curve[1,])
curve[1,2]/median(curve[1,])
curve[1,3]/median(curve[1,])
curve[1,11]/median(curve[1,])
curve[1,1]/median(curve[2,])
curve[2,1]/median(curve[2,])
curve[2,11]/median(curve[2,])
curve[3,11]/median(curve[3,])
View(QCs)
corrected<-X[,columnvector]*curve.prop
X[,(samples+(CCQC-1))]<-samples.df
X[,563]
X[1,563]
X[1,50]
View(X)
samplevector[1]
X[1,21]
colnames(X)[21]
ncol(X[,columnvector])
ncol(curve.prop)
View(curve)
curve.prop[1,1]
X[1,21]* curve.prop[1,1]
View(X)
corrected<-X[,columnvector]*curve.prop
corrected[1,1]
corrected<-X[,columnvector]*curve.prop
corrected[1,1]
a<-X[,columnvector]
View(a)
ncol(curve)
nrow(curve)
columnvector
X[1,50]
curve[1,1]
curve.prop[1,1]
X[1,50]*curve.prop[1,1]
message("...done")
flush.console()
if (sum(corrected[,1])==nrow(corrected)){
stop("smoothing parameter f is too small
(increase the proportion of datapoints used for signal drift correction)")
}
###identify QC variables with zero standard deviation####
QC_SD_zero<-apply(QCs,1,sd)
X.2<-X.2[QC_SD_zero!=0,]
Yzerofilled<-Yzerofilled[QC_SD_zero!=0,]
QCs<-QCs[QC_SD_zero!=0,]
X<-X[QC_SD_zero!=0,]
peakcolumns<-peakcolumns[QC_SD_zero!=0,]
curve<-curve[QC_SD_zero!=0,]
corrected<-corrected[QC_SD_zero!=0,]
######
##Negative variable identification following correction
negatives_mat<-data.matrix((corrected<0)*1)##identify variables with negative values following QC.LSC correction
NegMat_rowsums<-apply(negatives_mat,1,sum) ##take row sums
negative_variables<-corrected[NegMat_rowsums>=1,] ##subset negative variables
peak_neg_variables<-peakcolumns[NegMat_rowsums>=1,]
positive_variables<-corrected[NegMat_rowsums==0,] ##subset positive variables for gLog transform
peak_pos_variables<-peakcolumns[NegMat_rowsums==0,]
Raw_pos_variables<-Yzerofilled[NegMat_rowsums==0,]
Raw_neg_variables<-Yzerofilled[NegMat_rowsums>=1,]
Curve_pos_variables<-curve[NegMat_rowsums==0,]
Curve_neg_variables<-curve[NegMat_rowsums>=1,]
length(which(QC_SD_zero!=0))
NegMat_rowsums>=1
which(NegMat_rowsums>=1)
NegMat_rowsums[76]
NegMat_rowsums[114]
NegMat_rowsums[115]
NegMat_rowsums[75]
View(negatives_mat)
nrow(negatives_mat)
length(NegMat_rowsums)
NegMat_rowsums<-rowSums(negatives_mat) ##take row sums
length(NegMat_rowsums)
which(NegMat_rowsums>=1)
NegMat_rowsums
RAW_QCIndices<- seq(last.CCQC,length(X),QCInterval)
RAW_QCs<-X[,RAW_QCIndices]
RAW_QCs<-RAW_QCs[NegMat_rowsums==0,]
Var_raw<-apply(RAW_QCs,1,var)#variance
stddev_raw<-sqrt(Var_raw)#standard deviation
average_raw<-apply(RAW_QCs,1,mean) #average
RSD_raw<-(stddev_raw/average_raw)*100
RSD_raw_below<-ifelse (RSD<=RSD_raw & RSD_raw>=0,0,1)
Sum_RAW_Reprodfeatures<-sum(RSD_raw_below)#sum reproducible features before correction
RSD_TUS_QCs_RAW<-(sqrt(var(apply(RAW_QCs,2,sum)))/mean(apply(RAW_QCs,2,sum)))*100
RSD_TUS_QCs_RAW_below_threshold<-(sqrt(var(apply(RAW_QCs[RSD_raw_below==1,],2,sum)))/mean(apply(RAW_QCs[RSD_raw_below==1,],2,sum)))*100
# Reproducibility following correction
QCsCorrIndices<-seq(1,length(samplevector),QCInterval) # index of QCs from corrected matrix
QCscorr<-corrected[,QCsCorrIndices] # create matrix of corrected QCs
QCscorr<-QCscorr[NegMat_rowsums==0,]
Var_corr<-apply(QCscorr,1,var)#variance
stddev_corr<-sqrt(Var_corr)#standard deviation
average_corr<-apply(QCscorr,1,mean) #average
RSD_corr<-((stddev_corr/average_corr)*100)
RSD_corr_below<-ifelse (RSD<=RSD_corr&RSD_corr>=0,0,1)
Sum_Corr_Reprodfeatures<-sum(RSD_corr_below)#sum reproducible features before correction
RSD_TUS_QCscorr<-(sqrt(var(apply(QCscorr,2,sum)))/mean(apply(QCscorr,2,sum)))*100
RSD_TUS_QCscorr_below_threshold<-(sqrt(var(apply(QCscorr[RSD_corr_below==1,],2,sum)))/mean(apply(QCscorr[RSD_corr_below==1,],2,sum)))*100
View(peak_pos_variables)
min(curve.prop)
min(curve)
min(QCs)
18.63/100000
min(spline)
min(Z)
NA/40000
?na.spline
min(Lowess)
Lowess<-apply(QCs,1,lowess,f=smoother.span) #apply Lowess smoothing on QCs, arguments can be added here
min(Lowess)
Lowess<- data.frame(matrix(unlist(Lowess), nrow=length(X$name), byrow=T)) #coerce list result to dataframe
min(Lowess)
which(min(Lowess))
which.min(Lowess)
View(Lowess)
QCs[15,1]
min(QCs)
QCs[76,1]
QCs[76,2]
QCs[76,3]
QCs[76,4]
QCs[76,5]
QCs[76,6]
QCs[76,98]
QCs[76,95]
QCs[76,73]
QCs[76,19]
QCs[76,20]
View(QCs)
plot(seq(1,ncol(QCs),1),QCs[76,])
plot(seq(1,ncol(QCs),1),QCs[76,],lowess[76,])
plot(seq(1,ncol(QCs),1),QCs[76,])
point(Lowess[76,])
points(Lowess[76,])
Lowess<-Lowess[-c(1:length(QCs[1,]))] # remove X coordinates
View(Lowess)
points(Lowess[76,])
points(seq(1,ncol(QCs),1),Lowess[76,],col="blue")
points(seq(1,ncol(QCs),1),Lowess[76,],col="blue")
QCsCorrIndices<-seq(1,length(samplevector),QCInterval) # index of QCs from corrected matrix
QCscorr<-corrected[,QCsCorrIndices] # create matrix of corrected QCs
QCscorr<-QCscorr[NegMat_rowsums==0,]
Var_corr<-apply(QCscorr,1,var)#variance
stddev_corr<-sqrt(Var_corr)#standard deviation
average_corr<-apply(QCscorr,1,mean) #average
RSD_corr<-((stddev_corr/average_corr)*100)
RSD_corr_below<-ifelse (RSD<=RSD_corr&RSD_corr>=0,0,1)
Sum_Corr_Reprodfeatures<-sum(RSD_corr_below)#sum reproducible features before correction
RSD_TUS_QCscorr<-(sqrt(var(apply(QCscorr,2,sum)))/mean(apply(QCscorr,2,sum)))*100
RSD_TUS_QCscorr_below_threshold<-(sqrt(var(apply(QCscorr[RSD_corr_below==1,],2,sum)))/mean(apply(QCscorr[RSD_corr_below==1,],2,sum)))*100
###Generalized Log transform###
message("Generalized Log transformation...")#,quote=F)
flush.console()
log.corrected<-apply(positive_variables,2,function(x){log2((x+sqrt(x)^2+alpha.gLog^2)/2)}) #log transform on all samples and QCs
message("...done")
flush.console()
###fold change difference %CV following smoothing create scatterplots from greatly changed signals####
foldCVIndex<-((RSD_raw/RSD_corr)>=2)
sumfoldCVIndex<-sum(((RSD_raw/RSD_corr)>=2)*1)
RawfoldCV<-as.data.frame(Raw_pos_variables[foldCVIndex,]) ##matrix >2fold reduction in CV% following curve
QCcorrfoldCV<-as.data.frame(positive_variables[foldCVIndex,]) ##matrix >2fold reduction in CV% following curve
QCcorrLogfoldCV<-as.data.frame(log.corrected[foldCVIndex,])
peakfoldCV<-as.data.frame(peak_pos_variables[foldCVIndex,])
CurvefoldCV<-as.data.frame(Curve_pos_variables[foldCVIndex,])
RSD_rawfoldCV<-RSD_raw[foldCVIndex]
RSD_corrfoldCV<-RSD_corr[foldCVIndex]
tests_raw<-cbind(stddev_raw,average_raw,RSD_raw,RSD_raw_below)
tests_corr<-cbind(stddev_corr,average_corr,RSD_corr,RSD_corr_below)
Raw_data_RSD<-X[NegMat_rowsums==0,]
Corrected<-cbind(peak_pos_variables,tests_raw,tests_corr,log.corrected)
View(Corrected)
View(positive_variables)
Corrected<-cbind(peak_pos_variables,tests_raw,tests_corr,positive_variables)
Corrected.LogT<-cbind(peak_pos_variables,tests_raw,tests_corr,log.corrected)
Sum_reproducible_features<-cbind(Sum_RAW_Reprodfeatures,RSD_TUS_QCs_RAW,RSD_TUS_QCs_RAW_below_threshold,Sum_Corr_Reprodfeatures,RSD_TUS_QCscorr,RSD_TUS_QCscorr_below_threshold,sumfoldCVIndex)
###.csv file creation###
# Curve<-cbind(peak_pos_variables,Curve_pos_variables)
#  write.csv (Curve,file="Curve.csv")
write.csv(Corrected,"Corrected.csv",row.names=FALSE)
write.csv (Corrected.LogT,file="Corrected.LogT.csv",row.names=FALSE)
write.csv (Sum_reproducible_features,file="Sum_reproducible_features.csv",row.names=FALSE)
source('~/GitHub/MetMSLine/PreProc.QC.RLSC.GUI.R')
sumfoldCVIndex<2
sumfoldCVIndex
plot(seq(1,ncol(curve.prop),1),X[1,columnvector])
points(curve.prop[1,],col=blue)
points(curve.prop[1,],col="blue")
points(corrected[1,],col="blue")
points(seq(1,ncol(curve.prop),1),corrected[1,],col="blue")
plot(seq(1,ncol(curve.prop),1),X[2,columnvector])
points(seq(1,ncol(curve.prop),1),corrected[2,],col="blue")
points(seq(1,ncol(curve.prop),1),corrected[1,],col="blue")
plot(seq(1,ncol(curve.prop),1),X[1,columnvector])
points(seq(1,ncol(curve.prop),1),corrected[1,],col="blue")
4539/3278
3278/4539
median.curve<-apply(curve,1,median)
curve.prop<-apply(curve,1,function(x) median.curve[x]/x)
curve.prop<-apply(curve,1,function(x) median.curve[i]/x)
i=1
med<-median(curve[i,])
med/curve[i,]
curve[i,]*(med/curve[i,])
med/curve[i,]
for (i in 1:nrow(curve)){
med<-median(curve[i,])
curve[i,]<-med/curve[i,]
}
corrected<-X[,columnvector]*curve
message("...done")
flush.console()
if (sum(corrected[,1])==nrow(corrected)){
stop("smoothing parameter f is too small
(increase the proportion of datapoints used for signal drift correction)")
}
###identify QC variables with zero standard deviation####
QC_SD_zero<-apply(QCs,1,sd)
X.2<-X.2[QC_SD_zero!=0,]
Yzerofilled<-Yzerofilled[QC_SD_zero!=0,]
QCs<-QCs[QC_SD_zero!=0,]
X<-X[QC_SD_zero!=0,]
peakcolumns<-peakcolumns[QC_SD_zero!=0,]
curve<-curve[QC_SD_zero!=0,]
corrected<-corrected[QC_SD_zero!=0,]
######
##Negative variable identification following correction
negatives_mat<-data.matrix((corrected<0)*1)##identify variables with negative values following QC.LSC correction
NegMat_rowsums<-rowSums(negatives_mat) ##take row sums
negative_variables<-corrected[NegMat_rowsums>=1,] ##subset negative variables
peak_neg_variables<-peakcolumns[NegMat_rowsums>=1,]
positive_variables<-corrected[NegMat_rowsums==0,] ##subset positive variables for gLog transform
peak_pos_variables<-peakcolumns[NegMat_rowsums==0,]
Raw_pos_variables<-Yzerofilled[NegMat_rowsums==0,]
Raw_neg_variables<-Yzerofilled[NegMat_rowsums>=1,]
Curve_pos_variables<-curve[NegMat_rowsums==0,]
Curve_neg_variables<-curve[NegMat_rowsums>=1,]
#Reproducibility calculation
#Raw data
RAW_QCIndices<- seq(last.CCQC,length(X),QCInterval)
RAW_QCs<-X[,RAW_QCIndices]
RAW_QCs<-RAW_QCs[NegMat_rowsums==0,]
Var_raw<-apply(RAW_QCs,1,var)#variance
stddev_raw<-sqrt(Var_raw)#standard deviation
average_raw<-apply(RAW_QCs,1,mean) #average
RSD_raw<-(stddev_raw/average_raw)*100
RSD_raw_below<-ifelse (RSD<=RSD_raw & RSD_raw>=0,0,1)
Sum_RAW_Reprodfeatures<-sum(RSD_raw_below)#sum reproducible features before correction
RSD_TUS_QCs_RAW<-(sqrt(var(apply(RAW_QCs,2,sum)))/mean(apply(RAW_QCs,2,sum)))*100
RSD_TUS_QCs_RAW_below_threshold<-(sqrt(var(apply(RAW_QCs[RSD_raw_below==1,],2,sum)))/mean(apply(RAW_QCs[RSD_raw_below==1,],2,sum)))*100
# Reproducibility following correction
QCsCorrIndices<-seq(1,length(samplevector),QCInterval) # index of QCs from corrected matrix
QCscorr<-corrected[,QCsCorrIndices] # create matrix of corrected QCs
QCscorr<-QCscorr[NegMat_rowsums==0,]
Var_corr<-apply(QCscorr,1,var)#variance
stddev_corr<-sqrt(Var_corr)#standard deviation
average_corr<-apply(QCscorr,1,mean) #average
RSD_corr<-((stddev_corr/average_corr)*100)
RSD_corr_below<-ifelse (RSD<=RSD_corr&RSD_corr>=0,0,1)
Sum_Corr_Reprodfeatures<-sum(RSD_corr_below)#sum reproducible features before correction
RSD_TUS_QCscorr<-(sqrt(var(apply(QCscorr,2,sum)))/mean(apply(QCscorr,2,sum)))*100
RSD_TUS_QCscorr_below_threshold<-(sqrt(var(apply(QCscorr[RSD_corr_below==1,],2,sum)))/mean(apply(QCscorr[RSD_corr_below==1,],2,sum)))*100
###Generalized Log transform###
message("Generalized Log transformation...")#,quote=F)
flush.console()
log.corrected<-apply(positive_variables,2,function(x){log2((x+sqrt(x)^2+alpha.gLog^2)/2)}) #log transform on all samples and QCs
message("...done")
flush.console()
###fold change difference %CV following smoothing create scatterplots from greatly changed signals####
foldCVIndex<-((RSD_raw/RSD_corr)>=2)
sumfoldCVIndex<-sum(((RSD_raw/RSD_corr)>=2)*1)
RawfoldCV<-as.data.frame(Raw_pos_variables[foldCVIndex,]) ##matrix >2fold reduction in CV% following curve
QCcorrfoldCV<-as.data.frame(positive_variables[foldCVIndex,]) ##matrix >2fold reduction in CV% following curve
QCcorrLogfoldCV<-as.data.frame(log.corrected[foldCVIndex,])
peakfoldCV<-as.data.frame(peak_pos_variables[foldCVIndex,])
CurvefoldCV<-as.data.frame(Curve_pos_variables[foldCVIndex,])
RSD_rawfoldCV<-RSD_raw[foldCVIndex]
RSD_corrfoldCV<-RSD_corr[foldCVIndex]
tests_raw<-cbind(stddev_raw,average_raw,RSD_raw,RSD_raw_below)
tests_corr<-cbind(stddev_corr,average_corr,RSD_corr,RSD_corr_below)
Raw_data_RSD<-X[NegMat_rowsums==0,]
Corrected<-cbind(peak_pos_variables,tests_raw,tests_corr,positive_variables)
Corrected.LogT<-cbind(peak_pos_variables,tests_raw,tests_corr,log.corrected)
Sum_reproducible_features<-cbind(Sum_RAW_Reprodfeatures,RSD_TUS_QCs_RAW,RSD_TUS_QCs_RAW_below_threshold,Sum_Corr_Reprodfeatures,RSD_TUS_QCscorr,RSD_TUS_QCscorr_below_threshold,sumfoldCVIndex)
###.csv file creation###
# Curve<-cbind(peak_pos_variables,Curve_pos_variables)
#  write.csv (Curve,file="Curve.csv")
write.csv(Corrected,"Corrected.csv",row.names=FALSE)
write.csv (Corrected.LogT,file="Corrected.LogT.csv",row.names=FALSE)
write.csv (Sum_reproducible_features,file="Sum_reproducible_features.csv",row.names=FALSE)
#write.csv(Raw_data_RSD,"Raw_data_RSD.csv",row.names=FALSE)
if (scatter.plots==TRUE){
message("SAVING SCATTERPLOTS...")#,quote=F)
flush.console()
if(sumfoldCVIndex>1){
####Plot univariate scatterplot smoothing####
QCdummyMindex<-seq(1,length(RawfoldCV),QCInterval) # dummy matrix of QC injection position for PCA modelling
QCdummyM<-rep(1,ncol(RawfoldCV))
QCdummyM[QCdummyMindex]<-2
Plot_names<-as.character(peakfoldCV[,2])
dirname<-paste(dirname,"QC.LSC.Scatterplots")
dir.create(dirname)
setwd(dirname)
pb<-txtProgressBar(min=0,max=nrow(RawfoldCV),style=3)#,width=300)#title="Scatter plot progress bar"
for (i in 1:nrow(RawfoldCV)) {
Sys.sleep(0.1)
setTxtProgressBar(pb,i)
# setTkProgressBar(pb,i,label=paste( round(i/nrow(RawfoldCV)*100, 0),"% done"))
flush.console()
Titlename<-Plot_names[i]
RSD_raw_plot<-as.character(round(RSD_rawfoldCV[i],digits=2))
RSD_corr_plot<-as.character(round(RSD_corrfoldCV[i],digits=2))
AQ_order<-1:length(RawfoldCV[1,])
##Raw data## showing LOWESS curve
png(paste(Titlename,".png"),width=1200,height=1200,res=275)
plot(AQ_order,RawfoldCV[i,], main=paste("QC.LSC",Titlename),sub=paste("CV%",RSD_raw_plot),xlab="Acquisition_order", ylab="MS_signal_intensity",pch=19,col=c("black","red")[QCdummyM])
points(AQ_order,CurvefoldCV[i,],col="blue",cex=0.25)
legend("topleft",pch=c(19,19,17),legend=c("Samples","QCs","LSC.curve"),col=c("black","red","blue"))
dev.off()
####CORRECTED FEATURE FIGURES###
png(paste(Titlename,"CORR",".png"),width=1200,height=1200,res=275)
plot(AQ_order,QCcorrfoldCV[i,], main=paste("QC.LSC",Titlename,"Corrected"),sub=paste("CV%",RSD_corr_plot,"(smooth.span=",as.character(round(smoother.span,digits=2)),")"), xlab="Acquisition_order", ylab="Corrected_signal",pch=19,col=c("black","red")[QCdummyM])
dev.off()
}
close(pb)
message("...done")
flush.console()
}
}
if(sumfoldCVIndex<2){print("smoothing parameter f too large
(decrease the proportion of datapoints used for signal drift correction)")}
message("Pre-processing finished please examine results")#,quote=F)
flush.console()
}
curve.prop<-as.data.frame(matrix(0,ncol=ncol(curve),nrow=nrow(curve)))
curve<-X.2[,samplevector]<-spline
###reinsert normalised or non-normalised samples###
X[,(samples+(CCQC-1))]<-samples.df
curve.prop<-as.data.frame(matrix(0,ncol=ncol(curve),nrow=nrow(curve)))
for (i in 1:nrow(curve)){
med<-median(curve[i,])
curve.prop[i,]<-med/curve[i,]
}
corrected<-X[,columnvector]*curve.prop
message("...done")
flush.console()
if (sum(corrected[,1])==nrow(corrected)){
stop("smoothing parameter f is too small
(increase the proportion of datapoints used for signal drift correction)")
}
###identify QC variables with zero standard deviation####
QC_SD_zero<-apply(QCs,1,sd)
X.2<-X.2[QC_SD_zero!=0,]
Yzerofilled<-Yzerofilled[QC_SD_zero!=0,]
QCs<-QCs[QC_SD_zero!=0,]
X<-X[QC_SD_zero!=0,]
peakcolumns<-peakcolumns[QC_SD_zero!=0,]
curve<-curve[QC_SD_zero!=0,]
corrected<-corrected[QC_SD_zero!=0,]
######
##Negative variable identification following correction
negatives_mat<-data.matrix((corrected<0)*1)##identify variables with negative values following QC.LSC correction
NegMat_rowsums<-rowSums(negatives_mat) ##take row sums
negative_variables<-corrected[NegMat_rowsums>=1,] ##subset negative variables
peak_neg_variables<-peakcolumns[NegMat_rowsums>=1,]
positive_variables<-corrected[NegMat_rowsums==0,] ##subset positive variables for gLog transform
peak_pos_variables<-peakcolumns[NegMat_rowsums==0,]
Raw_pos_variables<-Yzerofilled[NegMat_rowsums==0,]
Raw_neg_variables<-Yzerofilled[NegMat_rowsums>=1,]
Curve_pos_variables<-curve[NegMat_rowsums==0,]
Curve_neg_variables<-curve[NegMat_rowsums>=1,]
#Reproducibility calculation
#Raw data
RAW_QCIndices<- seq(last.CCQC,length(X),QCInterval)
RAW_QCs<-X[,RAW_QCIndices]
RAW_QCs<-RAW_QCs[NegMat_rowsums==0,]
Var_raw<-apply(RAW_QCs,1,var)#variance
stddev_raw<-sqrt(Var_raw)#standard deviation
average_raw<-apply(RAW_QCs,1,mean) #average
RSD_raw<-(stddev_raw/average_raw)*100
RSD_raw_below<-ifelse (RSD<=RSD_raw & RSD_raw>=0,0,1)
Sum_RAW_Reprodfeatures<-sum(RSD_raw_below)#sum reproducible features before correction
RSD_TUS_QCs_RAW<-(sqrt(var(apply(RAW_QCs,2,sum)))/mean(apply(RAW_QCs,2,sum)))*100
RSD_TUS_QCs_RAW_below_threshold<-(sqrt(var(apply(RAW_QCs[RSD_raw_below==1,],2,sum)))/mean(apply(RAW_QCs[RSD_raw_below==1,],2,sum)))*100
# Reproducibility following correction
QCsCorrIndices<-seq(1,length(samplevector),QCInterval) # index of QCs from corrected matrix
QCscorr<-corrected[,QCsCorrIndices] # create matrix of corrected QCs
QCscorr<-QCscorr[NegMat_rowsums==0,]
Var_corr<-apply(QCscorr,1,var)#variance
stddev_corr<-sqrt(Var_corr)#standard deviation
average_corr<-apply(QCscorr,1,mean) #average
RSD_corr<-((stddev_corr/average_corr)*100)
RSD_corr_below<-ifelse (RSD<=RSD_corr&RSD_corr>=0,0,1)
Sum_Corr_Reprodfeatures<-sum(RSD_corr_below)#sum reproducible features before correction
RSD_TUS_QCscorr<-(sqrt(var(apply(QCscorr,2,sum)))/mean(apply(QCscorr,2,sum)))*100
RSD_TUS_QCscorr_below_threshold<-(sqrt(var(apply(QCscorr[RSD_corr_below==1,],2,sum)))/mean(apply(QCscorr[RSD_corr_below==1,],2,sum)))*100
###Generalized Log transform###
message("Generalized Log transformation...")#,quote=F)
flush.console()
log.corrected<-apply(positive_variables,2,function(x){log2((x+sqrt(x)^2+alpha.gLog^2)/2)}) #log transform on all samples and QCs
message("...done")
flush.console()
###fold change difference %CV following smoothing create scatterplots from greatly changed signals####
foldCVIndex<-((RSD_raw/RSD_corr)>=2)
sumfoldCVIndex<-sum(((RSD_raw/RSD_corr)>=2)*1)
RawfoldCV<-as.data.frame(Raw_pos_variables[foldCVIndex,]) ##matrix >2fold reduction in CV% following curve
QCcorrfoldCV<-as.data.frame(positive_variables[foldCVIndex,]) ##matrix >2fold reduction in CV% following curve
QCcorrLogfoldCV<-as.data.frame(log.corrected[foldCVIndex,])
peakfoldCV<-as.data.frame(peak_pos_variables[foldCVIndex,])
CurvefoldCV<-as.data.frame(Curve_pos_variables[foldCVIndex,])
RSD_rawfoldCV<-RSD_raw[foldCVIndex]
RSD_corrfoldCV<-RSD_corr[foldCVIndex]
tests_raw<-cbind(stddev_raw,average_raw,RSD_raw,RSD_raw_below)
tests_corr<-cbind(stddev_corr,average_corr,RSD_corr,RSD_corr_below)
Raw_data_RSD<-X[NegMat_rowsums==0,]
Corrected<-cbind(peak_pos_variables,tests_raw,tests_corr,positive_variables)
Corrected.LogT<-cbind(peak_pos_variables,tests_raw,tests_corr,log.corrected)
Sum_reproducible_features<-cbind(Sum_RAW_Reprodfeatures,RSD_TUS_QCs_RAW,RSD_TUS_QCs_RAW_below_threshold,Sum_Corr_Reprodfeatures,RSD_TUS_QCscorr,RSD_TUS_QCscorr_below_threshold,sumfoldCVIndex)
###.csv file creation###
# Curve<-cbind(peak_pos_variables,Curve_pos_variables)
#  write.csv (Curve,file="Curve.csv")
write.csv(Corrected,"Corrected.csv",row.names=FALSE)
write.csv (Corrected.LogT,file="Corrected.LogT.csv",row.names=FALSE)
write.csv (Sum_reproducible_features,file="Sum_reproducible_features.csv",row.names=FALSE)
#write.csv(Raw_data_RSD,"Raw_data_RSD.csv",row.names=FALSE)
if (scatter.plots==TRUE){
message("SAVING SCATTERPLOTS...")#,quote=F)
flush.console()
if(sumfoldCVIndex>1){
####Plot univariate scatterplot smoothing####
QCdummyMindex<-seq(1,length(RawfoldCV),QCInterval) # dummy matrix of QC injection position for PCA modelling
QCdummyM<-rep(1,ncol(RawfoldCV))
QCdummyM[QCdummyMindex]<-2
Plot_names<-as.character(peakfoldCV[,2])
dirname<-paste(dirname,"QC.LSC.Scatterplots")
dir.create(dirname)
setwd(dirname)
pb<-txtProgressBar(min=0,max=nrow(RawfoldCV),style=3)#,width=300)#title="Scatter plot progress bar"
for (i in 1:nrow(RawfoldCV)) {
Sys.sleep(0.1)
setTxtProgressBar(pb,i)
# setTkProgressBar(pb,i,label=paste( round(i/nrow(RawfoldCV)*100, 0),"% done"))
flush.console()
Titlename<-Plot_names[i]
RSD_raw_plot<-as.character(round(RSD_rawfoldCV[i],digits=2))
RSD_corr_plot<-as.character(round(RSD_corrfoldCV[i],digits=2))
AQ_order<-1:length(RawfoldCV[1,])
##Raw data## showing LOWESS curve
png(paste(Titlename,".png"),width=1200,height=1200,res=275)
plot(AQ_order,RawfoldCV[i,], main=paste("QC.LSC",Titlename),sub=paste("CV%",RSD_raw_plot),xlab="Acquisition_order", ylab="MS_signal_intensity",pch=19,col=c("black","red")[QCdummyM])
points(AQ_order,CurvefoldCV[i,],col="blue",cex=0.25)
legend("topleft",pch=c(19,19,17),legend=c("Samples","QCs","LSC.curve"),col=c("black","red","blue"))
dev.off()
####CORRECTED FEATURE FIGURES###
png(paste(Titlename,"CORR",".png"),width=1200,height=1200,res=275)
plot(AQ_order,QCcorrfoldCV[i,], main=paste("QC.LSC",Titlename,"Corrected"),sub=paste("CV%",RSD_corr_plot,"(smooth.span=",as.character(round(smoother.span,digits=2)),")"), xlab="Acquisition_order", ylab="Corrected_signal",pch=19,col=c("black","red")[QCdummyM])
dev.off()
}
close(pb)
message("...done")
flush.console()
}
}
if(sumfoldCVIndex<2){print("smoothing parameter f too large
(decrease the proportion of datapoints used for signal drift correction)")}
message("Pre-processing finished please examine results")#,quote=F)
flush.console()
source('~/GitHub/Cys34/Auto.Cys34.adducts.GUI.R')
source('~/GitHub/Cys34/Auto.Cys34.adducts.GUI.R')
files <- dir(full.names=TRUE,pattern=".mzXML$",recursive=TRUE)
files <- dir(full.names=TRUE,pattern="/.mzXML$",recursive=TRUE)
Results.df<-data.frame()
i=1
setwd(wd)
message(paste("Reading file", file[i],sep=""))#,quote=F)
message(paste("Reading file", files[i],sep=""))#,quote=F)
files
files <- dir(full.names=TRUE,pattern=".mzXML",recursive=TRUE)
files
?substr
Auto.MS.MS.file.name<-as.character(substr(files[i],1,(nchar(files[i])-6)))
Auto.MS.MS.file.name
Auto.MS.MS.file.name<-as.character(substr(files[i],3,(nchar(files[i])-6)))
Auto.MS.MS.file.name
dir<-paste(wd,Auto.MS.MS.file.name,sep="")
message(paste("Reading file", files[i],sep=""))#,quote=F)
flush.console()
Auto.MS.MS.file<-readMzXmlFile(files[i])
message("...done")#,quote=F)
flush.console()
source('~/GitHub/Cys34/Auto.Cys34.adducts.GUI.R')
source('~/GitHub/Cys34/Auto.Cys34.adducts.GUI.R')
source('~/GitHub/Cys34/Auto.Cys34.adducts.GUI.R')
