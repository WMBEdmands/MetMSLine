preProc_peakTable <- preProc(peakTable, obsNames, sampNames, qcNames, blankNames)
# read in table of synthetic MS1 metabolomic profiling data
peakTable <- system.file("extdata", "synthetic_MS_data.csv", package = "MetMSLine")
peakTable <- read.csv(peakTable, header=T, stringsAsFactors=F)
# all observation names
obsNames <- colnames(peakTable)[grep("QC_|sample_|blank_", colnames(peakTable))]
# quality control names
qcNames <- colnames(peakTable)[grep("QC_", colnames(peakTable))]
# sample names
sampNames <- colnames(peakTable)[grep("sample_", colnames(peakTable))]
# blank (negative control) names
blankNames <- colnames(peakTable)[grep("blank_", colnames(peakTable))]
library(MetMSLine)
# read in table of synthetic MS1 metabolomic profiling data
peakTable <- system.file("extdata", "synthetic_MS_data.csv", package = "MetMSLine")
peakTable <- read.csv(peakTable, header=T, stringsAsFactors=F)
# all observation names
obsNames <- colnames(peakTable)[grep("QC_|sample_|blank_", colnames(peakTable))]
# quality control names
qcNames <- colnames(peakTable)[grep("QC_", colnames(peakTable))]
# sample names
sampNames <- colnames(peakTable)[grep("sample_", colnames(peakTable))]
# blank (negative control) names
blankNames <- colnames(peakTable)[grep("blank_", colnames(peakTable))]
# conduct LC-MS data preprocessing
preProc_peakTable <- preProc(peakTable, obsNames, sampNames, qcNames, blankNames)
nCores <- parallel::detectCores()
library(MetMSLine)
library(MetMSLine)
?preProc
# read in table of synthetic MS1 metabolomic profiling data
peakTable <- system.file("extdata", "synthetic_MS_data.csv", package = "MetMSLine")
peakTable <- read.csv(peakTable, header=T, stringsAsFactors=F)
# all observation names
obsNames <- colnames(peakTable)[grep("QC_|sample_|blank_", colnames(peakTable))]
# quality control names
qcNames <- colnames(peakTable)[grep("QC_", colnames(peakTable))]
# sample names
sampNames <- colnames(peakTable)[grep("sample_", colnames(peakTable))]
# blank (negative control) names
blankNames <- colnames(peakTable)[grep("blank_", colnames(peakTable))]
# detect number of cores using parallel package
nCores <- parallel::detectCores()
# conduct LC-MS data preprocessing
preProc_peakTable <- preProc(peakTable, obsNames, sampNames, qcNames, blankNames,
cvThresh=30, nCores=nCores)
library(MetMSLine)
?preProc
# read in table of synthetic MS1 metabolomic profiling data
peakTable <- system.file("extdata", "synthetic_MS_data.csv", package = "MetMSLine")
peakTable <- read.csv(peakTable, header=T, stringsAsFactors=F)
# all observation names
obsNames <- colnames(peakTable)[grep("QC_|sample_|blank_", colnames(peakTable))]
# quality control names
qcNames <- colnames(peakTable)[grep("QC_", colnames(peakTable))]
# sample names
sampNames <- colnames(peakTable)[grep("sample_", colnames(peakTable))]
# blank (negative control) names
blankNames <- colnames(peakTable)[grep("blank_", colnames(peakTable))]
# detect number of cores using parallel package
nCores <- parallel::detectCores()
# conduct LC-MS data preprocessing
preProc_peakTable <- preProc(peakTable, obsNames, sampNames, qcNames, blankNames,
cvThresh=30, nCores=nCores)
!require(foreach)
library(MetMSLine)
?preProc
# read in table of synthetic MS1 metabolomic profiling data
peakTable <- system.file("extdata", "synthetic_MS_data.csv", package = "MetMSLine")
peakTable <- read.csv(peakTable, header=T, stringsAsFactors=F)
# all observation names
obsNames <- colnames(peakTable)[grep("QC_|sample_|blank_", colnames(peakTable))]
# quality control names
qcNames <- colnames(peakTable)[grep("QC_", colnames(peakTable))]
# sample names
sampNames <- colnames(peakTable)[grep("sample_", colnames(peakTable))]
# blank (negative control) names
blankNames <- colnames(peakTable)[grep("blank_", colnames(peakTable))]
# detect number of cores using parallel package
nCores <- parallel::detectCores()
# conduct LC-MS data preprocessing
preProc_peakTable <- preProc(peakTable, obsNames, sampNames, qcNames, blankNames,
cvThresh=30, nCores=nCores)
# read in table of synthetic MS1 metabolomic profiling data
peakTable <- system.file("extdata", "synthetic_MS_data.csv", package = "MetMSLine")
peakTable <- read.csv(peakTable, header=T, stringsAsFactors=F)
# all observation names
obsNames <- colnames(peakTable)[grep("QC_|sample_|blank_", colnames(peakTable))]
# quality control names
qcNames <- colnames(peakTable)[grep("QC_", colnames(peakTable))]
# sample names
sampNames <- colnames(peakTable)[grep("sample_", colnames(peakTable))]
# blank (negative control) names
blankNames <- colnames(peakTable)[grep("blank_", colnames(peakTable))]
# detect number of cores using parallel package
nCores <- parallel::detectCores()
# 1. zero fill
peakTable <- zeroFill(peakTable, obsNames, value=zeroFillValue)
# error handling
if(is.null(sampNames)){
stop('argument sampNames is missing with no default')
} else if(is.null(qcNames)){
stop('argument qcNames is missing with no default')
}
# error handling or read from csv function
peakTable <- tableCheckRead(peakTable, stringsAsFactors=F)
# match sample names to peak table colnames
sampIndx <- match(sampNames, colnames(peakTable))
# if less than all matched then stop
if(length(sampIndx) < length(sampNames)){
stop(length(sampIndx), " of ", length(sampNames),
" observation names were matched in the peakTable column names, check the sampNames and peakTable column names")
}
# match QC names to peak table colnames
qcIndx <- match(qcNames, colnames(peakTable))
# if less than all matched then stop
if(length(qcIndx) < length(qcNames)){
stop(length(qcIndx), " of ", length(qcNames),
" observation names were matched in the peakTable column names, check the qcNames and peakTable column names")
}
# subset table
obsTable <- peakTable[, sort(c(sampIndx, qcIndx))]
# check if any zeros or NAs
if(any(is.na(obsTable) | obsTable == 0)){
stop("peakTable observations contain NAs or zeros use the ?zeroFill function")
}
# match sample names to peak table colnames
sampIndxObs <- match(sampNames, colnames(obsTable))
# match QC names to peak table colnames
qcIndxObs <- match(qcNames, colnames(obsTable))
message("applying LOESS fit (7-fold CV) and signal drift/ attenuation smoothing...\n")
flush.console()
# convert to numeric in case character or factor
obsTable <- data.frame(apply(obsTable, 2, as.numeric), stringsAsFactors=F)
# new Df observatin and QC indx for loess modelling
qcsTable <- data.frame(t(obsTable[, qcIndxObs]), qcIndxObs, stringsAsFactors=F)
if(!require(foreach)){
stop('The foreach package (install.packages("foreach")) must be installed to perform parallel computations...')
}
me
ncol(obsTable)
ncol(qcsTable)
if(!require(foreach)){
stop('The foreach package (install.packages("foreach")) must be installed to perform parallel computations...')
}
message(paste0("Starting SNOW cluster with ", nCores,
" local sockets...\n"))
flush.console()
cl <- parallel::makeCluster(nCores)
doSNOW::registerDoSNOW(cl)
message("7-fold cross validaton loess fitting will be applied to ",
nrow(peakTable), " LC-MS features. Please wait...\n")
flush.console()
obsTable <- foreach(Var=1:nrow(obsTable), .packages="bootstrap", .combine='rbind') %dopar%
{
loessFitKfoldCV(qcIndxObs, qcsTable[, Var],
obsTable[Var, ])
}
parallel::stopCluster(cl)
library(MetMSLine)
if(!require(foreach)){
stop('The foreach package (install.packages("foreach")) must be installed to perform parallel computations...')
}
message(paste0("Starting SNOW cluster with ", nCores,
" local sockets...\n"))
flush.console()
cl <- parallel::makeCluster(nCores)
doSNOW::registerDoSNOW(cl)
message("7-fold cross validaton loess fitting will be applied to ",
nrow(peakTable), " LC-MS features. Please wait...\n")
flush.console()
obsTable <- foreach(Var=1:nrow(obsTable), .packages="bootstrap", .combine='rbind') %dopar%
{
loessFitKfoldCV(qcIndxObs, qcsTable[, Var],
obsTable[Var, ])
}
parallel::stopCluster(cl)
library(MetMSLine)
# read in table of synthetic MS1 metabolomic profiling data
peakTable <- system.file("extdata", "synthetic_MS_data.csv", package = "MetMSLine")
peakTable <- read.csv(peakTable, header=T, stringsAsFactors=F)
# all observation names
obsNames <- colnames(peakTable)[grep("QC_|sample_|blank_", colnames(peakTable))]
# quality control names
qcNames <- colnames(peakTable)[grep("QC_", colnames(peakTable))]
# sample names
sampNames <- colnames(peakTable)[grep("sample_", colnames(peakTable))]
# blank (negative control) names
blankNames <- colnames(peakTable)[grep("blank_", colnames(peakTable))]
# detect number of cores using parallel package
nCores <- parallel::detectCores()
# conduct LC-MS data preprocessing
preProc_peakTable <- preProc(peakTable, obsNames, sampNames, qcNames, blankNames,
cvThresh=30, nCores=nCores)
# read in table of synthetic MS1 metabolomic profiling data
peakTable <- system.file("extdata", "synthetic_MS_data.csv", package = "MetMSLine")
peakTable <- read.csv(peakTable, header=T, stringsAsFactors=F)
# all observation names
obsNames <- colnames(peakTable)[grep("QC_|sample_|blank_", colnames(peakTable))]
# quality control names
qcNames <- colnames(peakTable)[grep("QC_", colnames(peakTable))]
# sample names
sampNames <- colnames(peakTable)[grep("sample_", colnames(peakTable))]
# blank (negative control) names
blankNames <- colnames(peakTable)[grep("blank_", colnames(peakTable))]
# detect number of cores using parallel package
nCores <- parallel::detectCores()
peakTable <- zeroFill(peakTable, obsNames, value=zeroFillValue)
library(MetMSLine)
peakTable <- zeroFill(peakTable, obsNames, value=zeroFillValue)
zeroFillValue=NULL
baseLogT=exp(1)
blankFCthresh=2
blankFCmethod='mean'
normMethod="medFC"
# 2. if necessary normalize
if(!is.null(normMethod)){
peakTable <- signNorm(peakTable, obsNames, method=normMethod)
} else {
message('no normalization will be conducted by normMethod function...\n')
flush.console()
}
# 1. zero fill
peakTable <- zeroFill(peakTable, obsNames, value=zeroFillValue)
# 2. if necessary normalize
if(!is.null(normMethod)){
peakTable <- signNorm(peakTable, obsNames, method=normMethod)
} else {
message('no normalization will be conducted by normMethod function...\n')
flush.console()
}
peakTable <- loessSmooth(peakTable, sampNames, qcNames, nCores=nCores)
!is.null(peakTable$negVals)
message("removing ", sum(peakTable$negVals), " LC-MS features containing negative values following loess smoothing...\n")
flush.console()
peakTable <- peakTable[peakTable$negVals == F, ]
peakTable$negVals <- NULL
test <-
blankSub(peakTable, blankNames, sampNames, blankFCmethod,
blankFCthresh)
peakTable <- cvCalc(peakTable, qcNames, cvThresh)
cvThresh=30
peakTable <- cvCalc(peakTable, qcNames, cvThresh)
# read in table of synthetic MS1 metabolomic profiling data
peakTable <- system.file("extdata", "synthetic_MS_data.csv", package = "MetMSLine")
peakTable <- read.csv(peakTable, header=T, stringsAsFactors=F)
# all observation names
obsNames <- colnames(peakTable)[grep("QC_|sample_|blank_", colnames(peakTable))]
# quality control names
qcNames <- colnames(peakTable)[grep("QC_", colnames(peakTable))]
# sample names
sampNames <- colnames(peakTable)[grep("sample_", colnames(peakTable))]
# blank (negative control) names
blankNames <- colnames(peakTable)[grep("blank_", colnames(peakTable))]
# detect number of cores using parallel package
nCores <- parallel::detectCores()
# 1. zero fill
peakTable <- zeroFill(peakTable, obsNames, value=zeroFillValue)
# 2. if necessary normalize
if(!is.null(normMethod)){
peakTable <- signNorm(peakTable, obsNames, method=normMethod)
} else {
message('no normalization will be conducted by normMethod function...\n')
flush.console()
}
peakTable <- blankSub(peakTable, blankNames, sampNames, blankFCmethod,
blankFCthresh)
peakTable <- cvCalc(peakTable, qcNames, cvThresh)
# read in table of synthetic MS1 metabolomic profiling data
peakTable <- system.file("extdata", "synthetic_MS_data.csv", package = "MetMSLine")
peakTable <- read.csv(peakTable, header=T, stringsAsFactors=F)
# all observation names
obsNames <- colnames(peakTable)[grep("QC_|sample_|blank_", colnames(peakTable))]
# quality control names
qcNames <- colnames(peakTable)[grep("QC_", colnames(peakTable))]
# sample names
sampNames <- colnames(peakTable)[grep("sample_", colnames(peakTable))]
# blank (negative control) names
blankNames <- colnames(peakTable)[grep("blank_", colnames(peakTable))]
# detect number of cores using parallel package
nCores <- parallel::detectCores()
# 1. zero fill
peakTable <- zeroFill(peakTable, obsNames, value=zeroFillValue)
# 2. if necessary normalize
if(!is.null(normMethod)){
peakTable <- signNorm(peakTable, obsNames, method=normMethod)
} else {
message('no normalization will be conducted by normMethod function...\n')
flush.console()
}
# error handling
if(is.null(blankNames)){
stop('argument blankNames is missing with no default')
} else if(is.null(sampNames)){
stop('argument sampNames is missing with no default')
} else if(!(method == 'mean' | method == 'median')){
stop("argument method must be one of either 'mean' or 'median'")
}
method = 'mean'
# match blankNames to peak table colnames
blankIndx <- match(blankNames, colnames(peakTable))
# if none matched then stop
if(length(blankIndx) == 0){
stop("none of the blankNames were matched to column names of the peakTable argument. Please check and try again.")
}
# match sampNames to peak table colnames
sampIndx <- match(sampNames, colnames(peakTable))
# if none matched then stop
if(length(sampIndx) == 0){
stop("none of the sampNames were matched to column names of the peakTable argument. Please check and try again.")
}
# calculate fold change and create new column
message("performing blank substraction using...\n", length(sampIndx), " samples\n",
length(blankIndx), " blanks\n")
flush.console()
Var <- 1
plot(Var[sampIndx])
plot(as.numeric(Var[sampIndx])
)
Var <- peakTable[1, ]
plot(as.numeric(Var[sampIndx])
)
mean(as.numeric(Var[sampIndx]))
mean(as.numeric(Var[blankIndx]))
Var[blankIndx]
peakTable <- system.file("extdata", "synthetic_MS_data.csv", package = "MetMSLine")
peakTable <- read.csv(peakTable, header=T, stringsAsFactors=F)
Var <- peakTable[1, ]
mean(as.numeric(Var[blankIndx]))
# 1. zero fill
peakTable <- zeroFill(peakTable, obsNames, value=zeroFillValue)
# 2. if necessary normalize
if(!is.null(normMethod)){
peakTable <- signNorm(peakTable, sampNames, method=normMethod)
} else {
message('no normalization will be conducted by normMethod function...\n')
flush.console()
}
mean(as.numeric(Var[blankIndx]))
Var <- peakTable[1, ]
mean(as.numeric(Var[blankIndx]))
peakTable <- system.file("extdata", "synthetic_MS_data.csv", package = "MetMSLine")
peakTable <- read.csv(peakTable, header=T, stringsAsFactors=F)
as.numeric(Var[blankIndx])
peakTable <- zeroFill(peakTable, obsNames, value=zeroFillValue)
Var <- peakTable[1, ]
as.numeric(Var[blankIndx])
library(MetMSLine)
# read in table of synthetic MS1 metabolomic profiling data
peakTable <- system.file("extdata", "synthetic_MS_data.csv", package = "MetMSLine")
peakTable <- read.csv(peakTable, header=T, stringsAsFactors=F)
# all observation names
obsNames <- colnames(peakTable)[grep("QC_|sample_|blank_", colnames(peakTable))]
# quality control names
qcNames <- colnames(peakTable)[grep("QC_", colnames(peakTable))]
# sample names
sampNames <- colnames(peakTable)[grep("sample_", colnames(peakTable))]
# blank (negative control) names
blankNames <- colnames(peakTable)[grep("blank_", colnames(peakTable))]
# detect number of cores using parallel package
nCores <- parallel::detectCores()
# conduct LC-MS data preprocessing
preProc_peakTable <- preProc(peakTable, obsNames, sampNames, qcNames, blankNames,
cvThresh=30, nCores=nCores)
library(MetMSLine)
# read in table of synthetic MS1 metabolomic profiling data
peakTable <- system.file("extdata", "synthetic_MS_data.csv", package = "MetMSLine")
peakTable <- read.csv(peakTable, header=T, stringsAsFactors=F)
# all observation names
obsNames <- colnames(peakTable)[grep("QC_|sample_|blank_", colnames(peakTable))]
# quality control names
qcNames <- colnames(peakTable)[grep("QC_", colnames(peakTable))]
# sample names
sampNames <- colnames(peakTable)[grep("sample_", colnames(peakTable))]
# blank (negative control) names
blankNames <- colnames(peakTable)[grep("blank_", colnames(peakTable))]
# detect number of cores using parallel package
nCores <- parallel::detectCores()
# conduct LC-MS data preprocessing
preProc_peakTable <- preProc(peakTable, obsNames, sampNames, qcNames, blankNames,
cvThresh=30, nCores=nCores)
cvThresh=
30
baseLogT=exp(1)
blankFCmethod='mean'
blankFCthresh=2
normMethod="medFC"
# 1. zero fill
peakTable <- zeroFill(peakTable, obsNames, value=zeroFillValue)
# 2. if necessary normalize
if(!is.null(normMethod)){
peakTable <- signNorm(peakTable, sampNames, method=normMethod)
} else {
message('no normalization will be conducted by normMethod function...\n')
flush.console()
}
# 3. if necessary peform loess smoothing
if(!is.null(sampNames) & !is.null(qcNames)){
peakTable <- loessSmooth(peakTable, sampNames, qcNames, nCores=nCores)
# remove any negative variables
if(!is.null(peakTable$negVals)){
message("removing ", sum(peakTable$negVals), " LC-MS features containing negative values following loess smoothing...\n")
flush.console()
peakTable <- peakTable[peakTable$negVals == F, ]
# remove negVals column
peakTable$negVals <- NULL
}
} else {
message('no QC based signal attenuation correction will be performed...\n')
flush.console()
message('two vectors of sample names (sampNames) and quality controls (qcNames) must be supplied...\n')
flush.console()
}
# 4. if necessary peform blank subtraction
if(!is.null(sampNames) & !is.null(blankNames)){
peakTable <- blankSub(peakTable, blankNames, sampNames, blankFCmethod,
blankFCthresh)
} else {
message('no blank (negative control) based background subtraction will be performed...\n')
flush.console()
message('two vectors of sample names (sampNames) and blanks/ negative controls (blankNames) must be supplied...\n')
flush.console()
}
test <-
cvCalc(peakTable, qcNames, cvThresh)
obsNames <- qcNames
obsIndx <- match(obsNames, colnames(peakTable))
obsNames <- obsNames[10:length(obsNames)]
obsIndx <- match(obsNames, colnames(peakTable))
peakTable$coeffVar <- apply(peakTable[, obsIndx], 1, function(Var){
(mean(as.numeric(Var))/ sd(as.numeric(Var))) * 100})
apply(peakTable[, obsIndx], 1, function(Var){
(mean(as.numeric(Var))/ sd(as.numeric(Var))) * 100})
plot(peakTable[1, obsIndx])
plot(as.numeric(peakTable[1, obsIndx]))
mean(as.numeric(peakTable[1, obsIndx]))
mean(as.numeric(peakTable[1, obsIndx]))/
sd(as.numeric(peakTable[1, obsIndx]))
sd(as.numeric(peakTable[1, obsIndx]))
peakTable$coeffVar <- apply(peakTable[, obsIndx], 1, function(Var){
(sd(as.numeric(Var))/ mean(as.numeric(Var))) * 100})
min(peakTable$coeffVar)
cvIndx <- which(peakTable$coeffVar < thresh)
thresh=30
cvIndx <- which(peakTable$coeffVar < thresh)
library(MetMSLine)
# read in table of synthetic MS1 metabolomic profiling data
peakTable <- system.file("extdata", "synthetic_MS_data.csv", package = "MetMSLine")
peakTable <- read.csv(peakTable, header=T, stringsAsFactors=F)
# all observation names
obsNames <- colnames(peakTable)[grep("QC_|sample_|blank_", colnames(peakTable))]
# quality control names
qcNames <- colnames(peakTable)[grep("QC_", colnames(peakTable))]
# sample names
sampNames <- colnames(peakTable)[grep("sample_", colnames(peakTable))]
# blank (negative control) names
blankNames <- colnames(peakTable)[grep("blank_", colnames(peakTable))]
# detect number of cores using parallel package
nCores <- parallel::detectCores()
# conduct LC-MS data preprocessing
preProc_peakTable <- preProc(peakTable, obsNames, sampNames, qcNames, blankNames,
cvThresh=30, nCores=nCores)
library(MetMSLine)
source('~/.active-rstudio-document', echo=TRUE)
View(preProc_peakTable)
colnames(preProc_peakTable)
preProc_peakTable$coeffVar
tail(colnames(preProc_peakTable), n=3)
vignette("MetMSLine Basics", package="MetMSLine")
vignette("MetMSLineBasics", package="MetMSLine")
vignette("MetMSLineBasics.pdf", package="MetMSLine")
?vignette
vignette("MetMSLineBasics")
vignette()
library(MetMSLine)
devtools::use_vignette("my-vignette")
source('~/.active-rstudio-document', echo=TRUE)
View(peakTable)
pcaOutResults <- pcaOutId(wMeanPspec, obsNames, cv="q2", outTol=1.05,
scale="pareto")
pcaOutId
source('J:/Google Drive/Rappaport Lab Share/R-tools/MetMSLine/R/pcaOutId.R', echo=TRUE)
pcaOutResults <- pcaOutId(wMeanPspec, obsNames, cv="q2", outTol=1.05,
scale="pareto")
source('J:/Google Drive/Rappaport Lab Share/R-tools/MetMSLine/R/pcaOutId.R', echo=TRUE)
pcaOutResults <- pcaOutId(wMeanPspec, obsNames, cv="q2", outTol=1.05,
scale="pareto")
obsIndx <- match(obsNames, colnames(peakTable))
obsTable <- peakTable[, obsIndx]
obsNames
colnames(wMeanPspec)[13:ncol(wMeanPspec)]
obsNames <- colnames(wMeanPspec)[grep('ACN_|MeOH_|blank_', wMeanPspec)]
obsNames <- colnames(wMeanPspec)[grep('ACN_|MeOH_|blank_', colnames(wMeanPspec))]
#  on proportional expansion of the Hotellings T2 ellipse
pcaOutResults <- pcaOutId(wMeanPspec, obsNames, cv="q2", outTol=1.05,
scale="pareto")
library(MetMSLine)
#  on proportional expansion of the Hotellings T2 ellipse
pcaOutResults <- pcaOutId(wMeanPspec, obsNames, cv="q2", outTol=1.05,
scale="pareto")
View(pcaOutId)
View(pcaOutId)
library(MetMSLine)
vignette()
library(MetMSLine)
library(MetMSLine)
library(MetMSLine)
vignette(package="MetMSLine")
library(MetMSLine)
vignette('MetMSLine WorkFlow')
vignette('MetMSLine')
vignette('MetMSLineBasics')
